<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Article on EQuimper&#39;s Blog</title>
    <link>https://equimper.me/tags/article/</link>
    <description>Recent content in Article on EQuimper&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jan 2017 20:15:48 -0500</lastBuildDate>
    
	<atom:link href="https://equimper.me/tags/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing your API with Postman</title>
      <link>https://equimper.me/post/testing-your-api-with-postman/</link>
      <pubDate>Sat, 28 Jan 2017 20:15:48 -0500</pubDate>
      
      <guid>https://equimper.me/post/testing-your-api-with-postman/</guid>
      <description>Testing your API with Postman I&amp;rsquo;m sure you already know the famous tool call Postman. This is a super useful tool for test your API and looks at the response you get from your server. But I see a lot of people just using it as a manual tester. This is not wrong but you can get much better productivity with if you use some of Postman features.
Create your first Simple Test First thing this is a simple controller in your app where you can fetch a unique post with is ID as params.</description>
    </item>
    
    <item>
      <title>How do I Manage my State with React</title>
      <link>https://equimper.me/post/how-do-i-manage-my-state-with-react/</link>
      <pubDate>Sun, 13 May 2018 10:37:40 -0400</pubDate>
      
      <guid>https://equimper.me/post/how-do-i-manage-my-state-with-react/</guid>
      <description>Intro SML -&amp;gt; State management library -&amp;gt; like Redux or Mobx
P.S This is just my opinion, this is not a best practice guide etc, just what I found best for the app I built recently.
When building an app with react or react-native I had lots of options. One of the most important option was how to manage state, where should I put it, how to use it, and lastly how make it easy to maintain.</description>
    </item>
    
  </channel>
</rss>